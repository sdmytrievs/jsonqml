name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            build_dir: build-linux
            conda_platform: linux-64
            artifact_name: my-app-linux
          - os: windows-latest
            build_dir: build-windows
            conda_platform: win-64
            artifact_name: my-app-windows.zip
          - os: macos-latest
            build_dir: build-macos
            conda_platform: osx-64
            artifact_name: my-app-macos.dmg

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: "3.9" #Or any version you need
          activate-environment: qt-build-env
          environment-file: conda/environment.yml
          auto-activate-base: false
          auto-update-conda: true
          mamba-version: "*" #Use Mamba for speed

      - name: Install platform-specific dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-shape0 libxcb-shm0 libxcb-sync1 libxcb-xfixes0 libxcb-xkb1 libxkbcommon-x11-0

      - name: Configure CMake
        run: |
          mkdir ${{ matrix.build_dir }}
          cd ${{ matrix.build_dir }}
          cmake ..

      - name: Build
        run: |
          cd ${{ matrix.build_dir }}
          cmake --build . --config Release

      - name: Package (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd ${{ matrix.build_dir }}/Release
          7z a ../${{ matrix.artifact_name }} *.exe *.dll

      - name: Package (MacOS)
        if: matrix.os == 'macos-latest'
        run: |
          cd ${{ matrix.build_dir }}/Release
          mkdir my-app.app/Contents/MacOS
          cp my-app.app/Contents/MacOS/my-app my-app.app/Contents/MacOS/my-app.bin
          hdiutil create -volname "my-app" -srcfolder my-app.app -ov -format UDZO ${{ matrix.artifact_name }}

      - name: Package (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd ${{ matrix.build_dir }}/Release
          cp my-app ../${{ matrix.artifact_name }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.build_dir }}/${{ matrix.artifact_name }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Install Google Drive CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y google-drive-ocamlfuse

      - name: Configure Google Drive CLI
        run: |
          echo "${{ secrets.GOOGLE_DRIVE_REFRESH_TOKEN }}" > refresh_token.txt
          google-drive-ocamlfuse -headless -id "${{ secrets.GOOGLE_DRIVE_CLIENT_ID }}" -secret "${{ secrets.GOOGLE_DRIVE_CLIENT_SECRET }}" -refresh-token refresh_token.txt -label my-drive

      - name: Create Deploy Directory in Google Drive
        run: |
          mkdir -p ~/my-drive/deploy

      - name: Copy Artifacts to Google Drive
        run: |
          cp artifacts/* ~/my-drive/deploy/

      - name: Clean up Google Drive mount
        run: |
          fusermount -u ~/my-drive
